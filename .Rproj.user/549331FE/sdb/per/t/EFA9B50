{
    "contents" : "##### USER INPUT FILE NAMES ################\nTimeSeriesFile <- \"./TroutLake/TestDataTrout.csv\"\nParameterFile <- \"./TroutLake/ParameterInputsTrout.txt\"\n############################################\n\n##### LOAD PACKAGES ########################\nlibrary(signal)\nlibrary(zoo)\nlibrary(lubridate)\n############################################\n\n##### LOAD FUNCTIONS #######################\nsource(\"./R/Model/SOS_Sedimentation.R\")\nsource(\"./R/Model/SOS_SWGW.R\")\nsource(\"./R/Model/SOS_GPP.R\")\nsource(\"./R/Model/SOS_Resp.R\")\n############################################\n\n##### READ MAIN INPUT FILE #################\nRawData <- read.csv(TimeSeriesFile,header=T) #Read main data file with GLM outputs (physical input) and GPP input\nRawData$datetime <- as.POSIXct(strptime(RawData$datetime,\"%m/%d/%Y %H:%M\")) #Convert time to POSIX\n#Fill time-series gaps (linear interpolation)\nts_new <- data.frame(datetime = seq(RawData$datetime[1],RawData$datetime[nrow(RawData)],by=\"day\")) #Interpolate gapless time-series\nInputData <- merge(RawData,ts_new,all=T)\nInputData <- as.data.frame(InputData)\nfor (col in 2:ncol(InputData)){\n  InputData[,col] <- na.approx(InputData[,col])}\n############################################\n\n##### READ PARAMETER FILE ##################\nparameters <- read.table(file = ParameterFile,row.names=1,header=TRUE,comment.char=\"#\")\n############################################\n\n##### General Lake Inputs and Parameters ###\nlakePerim <- parameters[row.names(parameters)==\"LakePerimeter\",1] #m\nlakeDepth <- parameters[row.names(parameters)==\"LakeDepth\",1] #m\nlakeArea <- parameters[row.names(parameters)==\"LakeArea\",1] #m^2\nlakeVol <- parameters[row.names(parameters)==\"LakeVolume\",1] #m^3\nDOC_conc_init <- parameters[row.names(parameters)==\"DOC_init\",1]  #g/m3\nPOC_conc_init <- parameters[row.names(parameters)==\"POC_init\",1]  #Average POC concentration in water column (g/m^3)\n############################################\n\n###### Run Period and Time Step Setup #####\nTimeStep <- as.numeric(InputData$datetime[2]-InputData$datetime[1]) #days\nsteps <- nrow(InputData)\n############################################\n\n##### Sub-Topic Parameters: Sedimentation ######\nBurialFactor <- parameters[row.names(parameters)==\"BurialFactor\",1] #(1/days) Parameter estimation of OC burial in sediments\n############################################\n\n##### Sub-Topic Parameters: GPP ############\n#Currently built into GPP sub code.\n############################################\n\n##### Sub-Topic Parameters: sw/GW ##############\nPC <- parameters[row.names(parameters)==\"PropCanopy\",1] #unitless: proportion of lake shore with canopy\nPW <- parameters[row.names(parameters)==\"PropWetlands\",1] #unitless: proportion of lake shore with wetlands\n\nAoc_day <- parameters[row.names(parameters)==\"AerialLoad\",1] #g/m/yr: aerial loading factor\nWoc_day <- parameters[row.names(parameters)==\"WetlandLoad\",1] #g/m/yr: adjacent wetland loading factor\n\nprop_GW <- parameters[row.names(parameters)==\"PropGW\",1] # Unitless: proportion of Q_in that is from groundwater\nDOC_GW <- parameters[row.names(parameters)==\"DOC_gw\",1] # g/m3: DOC concentration in groundwater. 2-40 g/m3 per Hanson et al 2014\nDOC_SW <- parameters[row.names(parameters)==\"DOC_sw\",1] # g/m3: DOC concentration in surface water\nDOC_Precip <- parameters[row.names(parameters)==\"DOC_precip\",1] #g/m3: DOC concentration in precipitation\n############################################\n\n##### Sub-Topic Parameters: Min/Resp #######\nDOC_miner_const <- parameters[row.names(parameters)==\"DOC_miner_const\",1] #(1/days)\n############################################\n\n##### Declare Output Data Storage ##########\nPOC_conc <- data.frame(numeric(steps)) #Record running g/m3 POC concentration of mixed lake\nDOC_conc <- data.frame(numeric(steps)) #Record running g/m3 DOC concentration of mixed lake\nPOC_flux <- data.frame(GPP_in=numeric(steps),Flow_in=numeric(steps),Flow_out=numeric(steps),Sed_out=numeric(steps)) #Record POC flux (g/m2/yr) at each time step\nDOC_flux <- data.frame(Flow_in=numeric(steps),GPP_in=numeric(steps),Flow_out=numeric(steps),Resp_out=numeric(steps),Miner_out=numeric(steps)) #Record DOC flux (g/m2/yr) at each time step\nDOC_load <- data.frame(total=numeric(steps),alloch=numeric(steps),autoch=numeric(steps)) #Record DOC load (g) at each time step\nPOC_load <- data.frame(total=numeric(steps),alloch=numeric(steps),autoch=numeric(steps)) #Record POC load (g) at each time step\nDOC_out <- data.frame(total=numeric(steps)) #Record DOC removal (g) from system at each time step\nPOC_out <- data.frame(total=numeric(steps)) #Record POC removal (g) from system at each time step\n############################################\n\n##### Declare Data Storage - Sed ###########\nSedData <- data.frame(BurialScalingFactor=numeric(steps),MAR_oc=numeric(steps),\n                      POC_burial=numeric(steps))\nPOC_sed_out <- data.frame(numeric(steps))\n############################################\n\n##### Declare Data Storage - GPP ###########\nGPPdata <- data.frame(DOC_rate=numeric(steps),POC_rate=numeric(steps),DOC_mass=numeric(steps),POC_mass=numeric(steps))\n############################################\n\n##### Declare Data Storage - SW/GW #########\nSWGWData = data.frame(POC_Aerial=numeric(steps), POC_SW=numeric(steps), DOC_Wetland=numeric(steps), \n                        DOC_GW=numeric(steps), DOC_SW=numeric(steps), DailyRain=numeric(steps), \n                        DOC_Precip=numeric(steps), Load_DOC=numeric(steps), Load_POC=numeric(steps))\nSWGW_mass_in <- data.frame(POC=numeric(steps),DOC=numeric(steps))\nPOC_outflow <- data.frame(numeric(steps))\nDOC_outflow <- data.frame(numeric(steps))\n############################################\n\n##### Declare Data Storage - Mineralization/Respiration ###########\nMineralRespData <- data.frame(DOC_miner_mass=numeric(steps),DOC_resp_mass=numeric(steps))\n############################################\n\n##### Carbon Concentration Initialization ################\nPOC_conc[1,1] <- POC_conc_init # #Initialize POC concentration as baseline average\nDOC_conc[1,1] <- DOC_conc_init #Initialize DOC concentration g/m3\n##########################################################\n\n####################### MAIN PROGRAM #############################################\n##################################################################################\n\nfor (i in 1:(steps)){\n  \n  Q_sw <- InputData$TotInflow[i] #m3/s surface water flowrate at i\n  Q_gw <- Q_sw/(1-prop_GW) - Q_sw #m3/s; as a function of proportion of inflow that is GW\n  Q_out <- InputData$TotOutflow[i] #m3/s: total outflow. Assume steady state pending dynamic output\n  Rainfall <- InputData$Rain[i]/TimeStep #mm/day\n  \n  #Call GPP Function\n  RawProduction <- GPP(InputData$Chla[i],InputData$TP[i],InputData$SurfaceTemp[i]) #mg C/m^2/d\n  GPPdata[i,1:2] <- RawProduction\n  GPPdata$DOC_mass[i] <- GPPdata$DOC_rate[i]*lakeArea*TimeStep/1000 #g\n  GPPdata$POC_mass[i] <- GPPdata$POC_rate[i]*lakeArea*TimeStep/1000 #g\n\n  #Call SWGW Function\n  SWGW <- SWGWFunction(Q_sw,Q_gw,Rainfall,Aoc_day, PC, lakePerim, Woc_day, PW, DOC_GW, prop_GW, \n                             DOC_SW, DOC_Precip, lakeArea) #change these inputs to iterative [i] values when inputs are dynamic\n  SWGWData[i,1:9] <- SWGW\n  \n  #Calculate load from SWGW_in\n  SWGW_mass_in$DOC[i] <- SWGWData$Load_DOC[i]*TimeStep #g\n  SWGW_mass_in$POC[i] <- SWGWData$Load_POC[i]*TimeStep #g\n  \n  #Call Sedimentation Function\n  POC_mass <- POC_conc[i,1]*lakeVol\n  SedOutput <- SedimentationFunction(BurialFactor,TimeStep,POC_mass)\n  SedData[i,1:3] = SedOutput\n  POC_sed_out[i,1] <- SedData$POC_burial[i] #g\n  \n  #Call respiration function\n  DOC_resp_rate <- Resp(DOC_conc[i,1],InputData$Chla[i]) #g C/m3/d\n  MineralRespData$DOC_resp_mass[i] <- DOC_resp_rate*lakeVol*TimeStep #g C\n  \n  #Calc DOC mineralization out #! Hilary and Paul's DOC mineralization klug\n\n  MineralRespData$DOC_miner_mass[i] = DOC_conc[i,1]*lakeVol*DOC_miner_const #g Current concentration multiplied by lakevolume and a mineralization constant in units of 1/d\n\n  MinRespData$DOC_miner_mass[i] = DOC_conc[i,1]*lakeVol*DOC_miner_const #g Current concentration multiplied by lakevolume and a mineralization constant in units of 1/d\n  \n  #Calc outflow subtractions (assuming outflow concentrations = mixed lake concentrations)\n  POC_outflow[i,1] <- POC_conc[i,1]*Q_out*60*60*24*TimeStep #g\n  DOC_outflow[i,1] <- DOC_conc[i,1]*Q_out*60*60*24*TimeStep #g\n  \n  #Store POC and DOC fluxes as mass/area/time (g/m2/yr)\n  POC_flux$GPP_in[i] <- GPPdata$POC_mass[i]/lakeArea/(TimeStep/365)\n  POC_flux$Flow_in[i] <- SWGW_mass_in$POC[i]/lakeArea/(TimeStep/365)\n  POC_flux$Flow_out[i] <- POC_outflow[i,1]/lakeArea/(TimeStep/365)\n  POC_flux$Sed_out[i] <- POC_sed_out[i,1]/lakeArea/(TimeStep/365)\n  \n  DOC_flux$Flow_in[i] <- SWGW_mass_in$DOC[i]/lakeArea/(TimeStep/365)\n  DOC_flux$GPP_in[i] <- GPPdata$DOC_mass[i]/lakeArea/(TimeStep/365)\n  DOC_flux$Flow_out[i] <- DOC_outflow[i,1]/lakeArea/(TimeStep/365) \n  DOC_flux$Resp_out[i] <- MineralRespData$DOC_resp_mass[i]/lakeArea/(TimeStep/365) \n  DOC_flux$Miner_out[i] <- MineralRespData$DOC_miner_mass[i]/lakeArea/(TimeStep/365)  \n  \n  \n  #Update POC and DOC concentration values (g/m3) for whole lake\n  #POC_conc[i+1,1] <-  POC_conc[i,1] + ((GPPdata$GPP_mass[i] + SWGW_mass_in$POC[i] - POC_outflow[i,1] - POC_sed_out[i,1] - SedData$POC_to_DIC[i])/lakeVol) #g/m3\n  POC_conc[i+1,1] <-  POC_conc[i,1] + ((GPPdata$POC_mass[i] + SWGW_mass_in$POC[i] - POC_outflow[i,1] - POC_sed_out[i,1])/lakeVol) #g/m3\n  DOC_conc[i+1,1] <-  DOC_conc[i,1] + ((GPPdata$DOC_mass[i] + SWGW_mass_in$DOC[i] - DOC_outflow[i,1] - MineralRespData$DOC_resp_mass[i] - MineralRespData$DOC_miner_mass[i])/lakeVol) #g/m3\n  \n  #POC and DOC load (in) and fate (out) (g)\n  POC_load$total[i] <- GPPdata$POC_mass[i] + SWGW_mass_in$POC[i] #g \n  POC_load$alloch[i] <- SWGW_mass_in$POC[i] #g\n  POC_load$autoch[i] <- GPPdata$POC_mass[i] #g\n  DOC_load$total[i] <- GPPdata$DOC_mass[i] + SWGW_mass_in$DOC[i] #g\n  DOC_load$alloch[i] <- SWGW_mass_in$DOC[i] #g\n  DOC_load$autoch[i] <- GPPdata$DOC_mass[i] #g\n\n  POC_out$total[i] <- POC_outflow[i,1] + POC_sed_out[i,1] #g\n  DOC_out$total[i] <- DOC_outflow[i,1] + MineralRespData$DOC_resp_mass[i] + MineralRespData$DOC_miner_mass[i]  #g\n  \n  #Stop code and output error if concentrations go to negative\n  if (POC_conc[i+1,1]<=0){stop(\"Negative POC concentration!\")}\n  if (DOC_conc[i+1,1]<=0){stop(\"Negative DOC concentration!\")}\n}\n\n#Total carbon mass additions\nTotalPOCAllochIn <- sum(POC_load$alloch) #g\nTotalPOCAutochIn <- sum(POC_load$autoch) #g\nTotalDOCAllochIn <- sum(DOC_load$alloch) #g\nTotalDOCAutochIn <- sum(DOC_load$autoch) #g\n#Total carbon mass subtractions\nTotalPOCout <- sum(POC_out$total)\nTotalDOCout <- sum(DOC_out$total)\n#Change to total carbon stocks\nDeltaPOC <- POC_conc[steps+1,1]*lakeVol - POC_conc[1,1]*lakeVol #g\nDeltaDOC <- DOC_conc[steps+1,1]*lakeVol - DOC_conc[1,1]*lakeVol #g\n#Mass balance check (should be near zero)\nPOCcheck <- (TotalPOCAllochIn + TotalPOCAutochIn - TotalPOCout) - DeltaPOC\nDOCcheck <- (TotalDOCAllochIn + TotalDOCAutochIn - TotalDOCout) - DeltaDOC\n#Return mass balance checks\nprint(c(\"POC Balance:\",POCcheck))\nprint(c(\"DOC Balance:\",DOCcheck))\n\n######################## END MAIN PROGRAM #############################################\n#######################################################################################\n\n#Define plotting time-series\nConcOutputTimeSeries <- c(InputData$datetime,InputData$datetime[length(InputData$datetime)]+86400)\nOutputTimeSeries <- InputData$datetime\n\n#Plot POC and DOC fluxes in standardized units (g/m2/yr)\nxlabel <- \"Date/Time\"\nylabelPOC <- c(\"GPP POC In (g/m2/yr)\",\"Flow POC In (g/m2/yr)\",\"Flow POC Out (g/m2/yr)\",\"Sed POC Out (g/m2/yr)\")\nylabelDOC <- c(\"Flow DOC In (g/m2/yr)\",\"GPP DOC In (g/m2/yr)\",\"Flow  DOC Out (g/m2/yr)\",\"Respiration DOC Out (g/m2/yr)\",\"Mineralization DOC Out (g/m2/yr)\")\n\nfor (n in 1:ncol(POC_flux)){\n  plot(OutputTimeSeries,POC_flux[,n],xlab=xlabel,ylab=ylabelPOC[n],type='l')\n}\n\nfor (n in 1:ncol(DOC_flux)){\n  plot(OutputTimeSeries,DOC_flux[,n],xlab=xlabel,ylab=ylabelDOC[n],type='l')\n}\n\n#POC and DOC concentration in time (g/m3)\nplot(ConcOutputTimeSeries,POC_conc[,1],xlab=xlabel,ylab=\"POC Conc (g/m3)\",type=\"l\")\nplot(ConcOutputTimeSeries,DOC_conc[,1],xlab=xlabel,ylab=\"DOC Conc (g/m3)\",type=\"l\")\n\n\n\n\n\n\n",
    "created" : 1444723408146.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "96840904",
    "id" : "EFA9B50",
    "lastKnownWriteTime" : 1444723337,
    "path" : "~/Documents/Rpackages/SOS/R/Model/SOS_CentralCode.R",
    "project_path" : "R/Model/SOS_CentralCode.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "type" : "r_source"
}